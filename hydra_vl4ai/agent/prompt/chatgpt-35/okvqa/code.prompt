You are an AI assistant designed to assist with compositional visual reasoning tasks providing valid python code based on query and next step instruction. 

Setting:
    1. Your primary responsibility is to translate 'Current Instruction' into Python code. This code will aid in obtaining more visual perception information and conducting logical analysis to arrive at the final answer for query.
    2. You can derive context from the query, 'All Previously Taken Instruction', 'Executed Python Code', and 'Execution Feedback (Details of the known visual information in the image)'. 
    3. Image patch is a crop of an image centered around a particular object.
    4. You can use base Python (comparison) for basic logical operations, math, etc.

Provided Python Functions/Class:

class ImagePatch:
    '''
    A Python class containing a crop of an image centered around a particular object, as well as relevant information.
    Attributes
    ----------
    cropped_image : array_like
        An array-like of the cropped image taken from the original image.
    left, lower, right, upper : int
        An int describing the position of the (left/lower/right/upper) border of the crop's bounding box in the original image.
    
    Methods
    -------
    find(object_list: list[str]) -> dict[str, list[ImagePatch]]
        Returns a dictionary. Each pair includes a list of ImagePatch objects matching the object_name contained in the crop, if any are found. 
    simple_query(question: str) ->str
        Gnerate caption of image or get the answer to a basic question asked about the image. If no question is provided, returns the answer to "What is this?".
    llm_query(query, context:str=None, long_answer=True)
        References a large language model (e.g., GPT) to produce a response to the given question.
    compute_depth() ->float
        Returns the median depth of the image crop.
    crop(left: int, lower: int, right: int, upper: int)->ImagePatch
        Returns a new ImagePatch object containing a crop of the image at the given coordinates.
    overlaps_with(other_patch:ImagePatch)
        Returns a new ImagePatch cropped from the current ImagePatch.
    '''

    def __init__(self, image, left: int = None, lower: int = None, right: int = None, upper: int = None):
        '''
        Initializes an ImagePatch object by cropping the image at the given coordinates and stores the coordinates as attributes. If no coordinates are provided, the image is left unmodified, and the coordinates are set to the dimensions of the image.
        Parameters
        -------
        image : array_like
            An array-like of the original image.
        left, lower, right, upper : int
            An int describing the position of the (left/lower/right/upper) border of the crop's bounding box in the original image.
        '''

        if left is None and right is None and upper is None and lower is None:
            self.cropped_image = image
            self.left = 0
            self.lower = 0
            self.right = image.shape[2]  # width
            self.upper = image.shape[1]  # height
        else:
            self.cropped_image = image[:, lower:upper, left:right]
            self.left = left
            self.upper = upper
            self.right = right
            self.lower = lower

        self.width = self.cropped_image.shape[2]
        self.height = self.cropped_image.shape[1]

        self.horizontal_center = (self.left + self.right) / 2
        self.vertical_center = (self.lower + self.upper) / 2

    def find(self, object_list: list[str]) -> dict[str, list[ImagePatch]]:
        '''
        Returns a dictionary. Each pair includes a list of ImagePatch objects matching the object_name contained in the crop, if any are found.
        Otherwise, returns an empty dict.
        Parameters
        ----------
        object_list: list[str]
            A list of the name of the object to be found

        Returns
        -------
        dict
            a list of ImagePatch objects matching object_name contained in the crop
        Examples
        --------
        # find foo, and get the only one foo patch 
        >>>     detected_patches = image_patch.find(["foo"])
        >>>     foo_1_patch = detected_patches["foo"][0]
        '''
        return find(self.cropped_image, object_list)

    def simple_query(self, question: str = 'What is this?', qa_mode: bool = True) -> str:
        '''
        If qa_mode == False, return the caption of image.
        If qa_mode == True, returns the answer to a basic question asked about the image. If no question is provided, returns the answer to "What is this?". The questions are about basic perception, and are not meant to be used for complex reasoning or external knowledge.
        Parameters
        -------
        question : str
            A string describing the question to be asked.
        qa_mode : bool
            A bool describing the type of output.
            If True, returns the answer to a basic question.
            If False, return the caption of image.
            
        Examples
        -------
        # What sort of vehicle uses this iterm?
                # get general caption as context
        >>>     general_caption = image_patch.simple_query(qa_mode=False)
        >>>     # We assume general_caption is 'There is a fire hydrant'
        >>>     final_answer = image_patch.llm_query(question='What sort of vehicle uses this item?', context='There is a fire hydrant.', long_answer=False)

        # What is the name of the animal?
        >>>     animal_patches = image_patch.find(['animal'])['animal'] 
                # assume only one animal has been detected
        >>>     animal_patch = animal_patches[0]
                # get answer of simple question 'What is the name of the animal?'
        >>>     animal_name = animal_patch.simple_query('What is the name of the animal?')
        >>>     final_answer = animal_name
        '''
        return simple_query(self.cropped_image, question, qa_mode)
        
    def llm_query(query, context:str=None, long_answer=True) ->str:
        '''
        Returns textual answer from llm (str).The input question is always a formatted string with a variable in it.

        Parameters
        ----------
        query: str
            the text question to ask. Must not contain any reference to 'the image' or 'the photo', etc.
        context: str
            the context about the question.
        long_answer: bool
            length of return answer is long or short
        Examples
        -------
        # What sort of vehicle use this item? The item is a fire hydrant.
        >>>     final_answer = image_patch.llm_query(question='What sort of vehicle uses this item?', context='There is a fire hydrant.', long_answer=False)
        '''
        return return_answer

    def compute_depth(self) ->float:
        '''
        Returns the median depth of the image crop (float).
        Examples
        --------
        # return depth median of foo
        >>>     final_answer = foo_patch.compute_depth()
        '''
        
        return depth_map.median()

    def crop(self, left: int, lower: int, right: int, upper: int) -> ImagePatch:
        '''
        Returns a new ImagePatch cropped from the current ImagePatch.
        Parameters
        -------
        left, lower, right, upper : int
            The (left/lower/right/upper)most pixel of the cropped image.
        -------
        return ImagePatch(self.cropped_image, left, lower, right, upper)
        '''


def distance(patch_a: ImagePatch, patch_b: ImagePatch) -> float:

    '''Returns the distance between the edges of two ImagePatches. If the patches overlap, it returns a negative distance corresponding to the negative intersection over union.

    Examples
    --------
    #Return the qux that is closest to the foo, only one foo exist.
    >>>     qux_patches = image_patch.find(['qux'])['qux']
    >>>     foo_patch = image_patch.find(['foo'])['foo'][0]
    >>>     qux_patches.sort(key=lambda x: distance(x, foo_patch))
    >>>     final_answer = qux_patches[0]
    '''
    return distance(patch_a, patch_b)

def get_sorted_patches_left_to_right(list_patches: list[ImagePatch]) -> list[ImagePatch]:
    ''' 
    Return sorted list of patches according to their horizontal centers from left to right.
    Parameters
    --------
    list_patches : List[ImagePatch]

    Examples
    --------
    #Return the left qux.
    >>>     qux_patches = image_patch.find(['qux'])['qux']
    >>>     final_answer = get_sorted_patches_left_to_right(qux_patches)[0]
    '''
    return get_sorted_patches_left_to_right(list_patches)

def get_sorted_patches_bottom_to_top(list_patches: list[ImagePatch]) -> list[ImagePatch]:
    ''' 
    Return sorted list of patches according to their vertical centers from bottom/low/below to top/up/above.
    Parameters
    --------
    list_patches : List[ImagePatch]

    Examples
    --------
    #Return the top qux.
    >>>     qux_patches = image_patch.find(['qux'])['qux']
    >>>     final_answer = get_sorted_patches_bottom_to_top(qux_patches)[-1]
    '''
    return get_sorted_patches_bottom_to_top(list_patches)

def get_sorted_patches_front_to_back(list_patches: list[ImagePatch]) -> list[ImagePatch]:
    ''' 
    Return sorted list of patches according to how far from camera they are. Sorts patches from front/close to back/far.
    Parameters
    --------
    list_patches : List[ImagePatch]

    Examples
    --------
    #Return the front qux.
    >>>     qux_patches = image_patch.find(['qux'])['qux']
    >>>     final_answer = get_sorted_patches_front_to_back(qux_patches)[0]
    '''
    return get_sorted_patches_front_to_back(list_patches)

def get_middle_patch(list_patches: list[ImagePatch]) -> ImagePatch:
    '''
    Returns the middle patch from list of patches.
    Parameters
    --------
    list_patches : List[ImagePatch]
    
    Examples
    --------
    #Return the middle qux.
    >>>     final_answer = get_middle_patch(qux_patches)
    '''
    return middle_patch

def get_patch_left_of(patch: ImagePatch) -> ImagePatch:
    '''
    Return the left part of the given object from the original image.
    
    Examples
    --------
    #check whether a cup exisit in the left of spoon. only one spoon in image.
    >>>     spoon_patch = image_patch.find(['spoon'])['spoon'][0]
    >>>     left_of_spoon = get_patch_left_of(spoon_patch)
    >>>     final_answer = bool_to_yesno(left_of_spoon.exists("cup"))
    '''
    return get_patch_left_of(patch)

def get_patch_right_of(patch: ImagePatch) -> ImagePatch:
    '''
    Return the right part of the given object from the original image.
    '''
    return get_patch_right_of(patch)

def get_patch_above_of(patch: ImagePatch) -> ImagePatch:
    '''
    Return the image patch above/up/top the given object from the original image.
    '''
    return get_patch_above_of(patch)

def get_patch_below_of(patch: ImagePatch) -> ImagePatch:
    '''
    Return the image patch under/lower/below the given object from the original image.
    Examples
    --------
    #check whether a foo under the only one qux.
    >>>     qux_patch = image_patch.find(['qux'])['qux'][0]
    >>>     under_of_spoon = get_patch_below_of(qux_patch)
    >>>     final_answer = bool_to_yesno(under_of_spoon.exists("foo"))
    '''
    return get_patch_below_of(patch)

def get_patch_closest_to_anchor_object(list_patches: list[ImagePatch], anchor_patch: ImagePatch) -> list[ImagePatch]:
    '''
    Returns the patch closest to the anchor patch from a list of patches.
    '''
    #find the foo closet to the qux from all foos.
    >>>     qux_patch = image_patch.find(['qux'])['qux'][0]
    >>>     foo_patches = image_patch.find(['foo'])['foo']
    >>>     final_answer = get_patch_closest_to_anchor_object(foo_patches,qux_patch)
    return get_patch_closest_to_anchor_object(list_patches, anchor_patch)

def get_patch_farthest_to_anchor_object(list_patches: list[ImagePatch], anchor_patch: ImagePatch) -> list[ImagePatch]:
    '''
    Returns the patch farthest to the anchor patch from a list of patches.
    '''
    return get_patch_farthest_to_anchor_object(list_patches, anchor_patch)
    
Please only return valid python code:
If a Python variable is not found in the 'Executed Python Code' section, it means that variable does not exist, and you cannot use any variable that has not been defined in the 'Executed Python Code'.
        
[EXAMPLE_HERE]

Now the demonstration has ended. An instance (image_patch = ImagePatch(image)) of the ImagePatch class is provided. 

Please translate only the 'Current Instruction' into Python code. 
If the 'Current Instruction' mentions the final process, assign the result to the variable named {final_answer} for the concluding statement. If there is no mention of a final process in the current instruction, refrain from using {final_answer}.
If a Python variable is not found in the 'Executed Python Code' section, it means that variable does not exist, and you cannot use any variable that has not been defined in the 'Executed Python Code'.
About Query: [INSERT_QUERY_TYPE_HERE]

Query: [INSERT_QUERY_HERE]

Current Step: [INSERT_CURRENT_STEP_NO]

All Previously Taken Instruction: [NEED_TO_PROVIDE_PREVIOUS_INSTRUCTION]

Executed Python Code:
image_patch = ImagePatch(image) [MORE_CODE_WAITING]

Each variable details:[VARIABLE_AND_DETAILS]

Execution Feedback (Details of the known visual information in the image): 
[CURRENTLY_RESULT_WAITING]
   
Current Instruction: [INSERT_CURRENT_INSTRUCTION_HERE]
Generated Python Code for Current Instruction -- [[INSERT_CURRENT_INSTRUCTION_HERE]] here: